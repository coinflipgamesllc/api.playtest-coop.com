basePath: /v1
definitions:
  app.CreateFileRequest:
    properties:
      caption:
        example: What a cool image of a game!
        type: string
      filename:
        example: example-image.png
        type: string
      game:
        example: 123
        type: integer
      object:
        example: asd9fhgaoseucgewio.png
        type: string
      role:
        example: Image
        type: string
      size:
        example: 1241231
        type: integer
    required:
    - filename
    - object
    - role
    - size
    type: object
  app.CreateGameRequest:
    properties:
      designers:
        items:
          type: integer
        type: array
      overview:
        type: string
      stats:
        $ref: '#/definitions/app.Stats'
      title:
        type: string
    required:
    - title
    type: object
  app.FileResponse:
    properties:
      file:
        $ref: '#/definitions/domain.File'
    type: object
  app.GameResponse:
    properties:
      game:
        $ref: '#/definitions/domain.Game'
    type: object
  app.ListFilesResponse:
    properties:
      files:
        items:
          $ref: '#/definitions/domain.File'
        type: array
    type: object
  app.ListGamesResponse:
    properties:
      games:
        items:
          $ref: '#/definitions/domain.Game'
        type: array
      limit:
        example: 100
        type: integer
      offset:
        example: 50
        type: integer
      total:
        example: 1000
        type: integer
    type: object
  app.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: AVerySecurePassword123!
        type: string
    required:
    - email
    - password
    type: object
  app.PresignUploadRequest:
    properties:
      extension:
        example: jpg
        type: string
      name:
        example: my-awesome-file.jpg
        type: string
    required:
    - extension
    - name
    type: object
  app.PresignUploadResponse:
    properties:
      url:
        example: https://assets.playtest-coop.com/...
        type: string
    type: object
  app.ResetPasswordRequest:
    properties:
      email:
        example: user@example.com
        type: string
    required:
    - email
    type: object
  app.SignupRequest:
    properties:
      email:
        example: user@example.com
        type: string
      name:
        example: User McUserton
        type: string
      password:
        example: AVerySecurePassword123!
        type: string
    required:
    - email
    - name
    - password
    type: object
  app.Stats:
    properties:
      estimated_playtime:
        example: 30
        type: integer
      max_players:
        example: 5
        type: integer
      min_age:
        example: 8
        type: integer
      min_players:
        example: 1
        type: integer
    type: object
  app.UpdateGameRequest:
    properties:
      designers:
        items:
          type: integer
        type: array
      overview:
        type: string
      stats:
        $ref: '#/definitions/app.Stats'
      status:
        type: string
      title:
        type: string
    type: object
  app.UpdateUserRequest:
    properties:
      email:
        example: user@example.com
        type: string
      name:
        example: User McUserton
        type: string
      new_password:
        example: AVerySecurePassword123!
        type: string
      old_password:
        example: NotASecurePassword
        type: string
      pronouns:
        example: they/them
        type: string
    type: object
  app.UserResponse:
    properties:
      user:
        $ref: '#/definitions/domain.User'
    type: object
  controller.AckResponse:
    properties:
      message:
        type: string
    type: object
  controller.RequestErrorResponse:
    properties:
      error:
        type: string
    type: object
  controller.ServerErrorResponse:
    properties:
      error:
        type: string
    type: object
  controller.UnauthorizedResponse:
    properties:
      error:
        type: string
    type: object
  controller.ValidationErrorResponse:
    properties:
      errors:
        additionalProperties:
          type: string
        type: object
    type: object
  domain.File:
    properties:
      caption:
        example: What a cool image of a game!
        type: string
      created_at:
        example: "2020-12-11T15:29:49.321629-08:00"
        type: string
      filename:
        example: example-image.png
        type: string
      id:
        example: 123
        type: integer
      role:
        example: Image
        type: string
      updated_at:
        example: "2020-12-13T15:42:40.578904-08:00"
        type: string
      url:
        example: https://assets.playtest-coop.com/asd9fhgaoseucgewio.png
        type: string
    type: object
  domain.Game:
    properties:
      created_at:
        example: "2020-12-11T15:29:49.321629-08:00"
        type: string
      designers:
        items:
          $ref: '#/definitions/domain.User'
        type: array
      files:
        items:
          $ref: '#/definitions/domain.File'
        type: array
      id:
        example: 123
        type: integer
      overview:
        example: In the Best Game, players take on the role of ...
        type: string
      stats:
        $ref: '#/definitions/game.Stats'
      status:
        example: Prototype
        type: string
      title:
        example: The Best Game
        type: string
      updated_at:
        example: "2020-12-13T15:42:40.578904-08:00"
        type: string
    type: object
  domain.User:
    properties:
      created_at:
        example: "2020-12-11T15:29:49.321629-08:00"
        type: string
      id:
        example: 123
        type: integer
      name:
        example: User McUserton
        type: string
      pronouns:
        example: they/them
        type: string
      updated_at:
        example: "2020-12-13T15:42:40.578904-08:00"
        type: string
    type: object
  game.Stats:
    properties:
      estimated_playtime:
        example: 30
        type: integer
      max_players:
        example: 5
        type: integer
      min_age:
        example: 8
        type: integer
      min_players:
        example: 1
        type: integer
    type: object
host: api.playtest-coop.com
info:
  contact:
    email: hi@coinflipgames.co
    name: Coin Flip Games
  description: This is the backend for all Playtest Co-op related data
  termsOfService: https://playtest-coop.com/terms-of-service
  title: Playtest Co-op API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: User email/password combo
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/app.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.RequestErrorResponse'
      summary: Authenticate a user
      tags:
      - auth
  /auth/logout:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.AckResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.RequestErrorResponse'
      summary: End an authenticated session
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      parameters:
      - description: User email to request a password reset for
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/app.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.AckResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.RequestErrorResponse'
      summary: Send a password reset email to the specified email
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      parameters:
      - description: User name, email, and password
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/app.SignupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.RequestErrorResponse'
      summary: Create and authenticates a new user
      tags:
      - auth
  /auth/user:
    get:
      description: The authentication token includes the user's ID as the subject.
        We extract that and use it to pull the user from the database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.UnauthorizedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ServerErrorResponse'
      summary: Retrieve the authenticated user
      tags:
      - auth
    put:
      consumes:
      - application/json
      parameters:
      - description: User data to update
        in: body
        name: params
        schema:
          $ref: '#/definitions/app.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ValidationErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.UnauthorizedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ServerErrorResponse'
      summary: Update authenticated user
      tags:
      - auth
  /files:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ListFilesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ServerErrorResponse'
      summary: List files belonging to the authenticated user
      tags:
      - files
    post:
      consumes:
      - application/json
      parameters:
      - description: File data
        in: body
        name: file
        required: true
        schema:
          $ref: '#/definitions/app.CreateFileRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.FileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.RequestErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ServerErrorResponse'
      summary: Save a record of a file stored in S3
      tags:
      - files
  /files/:id:
    delete:
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.AckResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.RequestErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ServerErrorResponse'
      summary: remove a file by ID
      tags:
      - files
  /files/sign:
    get:
      consumes:
      - application/json
      parameters:
      - description: File data
        in: body
        name: file
        required: true
        schema:
          $ref: '#/definitions/app.PresignUploadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.PresignUploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.RequestErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ServerErrorResponse'
      summary: Generate a presigned URL for the client to upload directly to S3
      tags:
      - files
  /games:
    get:
      consumes:
      - application/json
      parameters:
      - example: 13
        in: query
        name: age
        type: integer
      - example: Designer McDesignerton
        in: query
        name: designer
        type: string
      - example: 100
        in: query
        name: limit
        type: integer
      - example: 50
        in: query
        name: offset
        type: integer
      - example: 2
        in: query
        name: playerCount
        type: integer
      - example: 30
        in: query
        name: playtime
        type: integer
      - example: name,desc
        in: query
        name: sort
        type: string
      - example: Prototype
        in: query
        name: status
        type: string
      - example: New Game
        in: query
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ListGamesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.RequestErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ServerErrorResponse'
      summary: List games matching the query with pagination
      tags:
      - games
    post:
      consumes:
      - application/json
      parameters:
      - description: Game data
        in: body
        name: game
        required: true
        schema:
          $ref: '#/definitions/app.CreateGameRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.GameResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.RequestErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ServerErrorResponse'
      summary: Create a new stub game
      tags:
      - games
  /games/:id:
    get:
      parameters:
      - description: Game ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.GameResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.RequestErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ServerErrorResponse'
      summary: Return a specific game by id
      tags:
      - games
    put:
      consumes:
      - application/json
      parameters:
      - description: Game ID
        in: path
        name: id
        required: true
        type: integer
      - description: Game data
        in: body
        name: game
        schema:
          $ref: '#/definitions/app.UpdateGameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.GameResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.RequestErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ServerErrorResponse'
      summary: Update a specific game
      tags:
      - games
swagger: "2.0"
